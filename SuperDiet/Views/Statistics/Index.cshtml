
@{
    ViewData["Title"] = "Statistics";
}
<h2>Statistics</h2>
<section>

</section>

@section scripts
    {
    <script>
        $(document).ready(function () {
            $.ajax({
                url: "/GetItem",
                success: function (data) {
                    var margin = { top: 20, right: 20, bottom: 70, left: 40 },
                        width = 600 - margin.left - margin.right,
                        height = 300 - margin.top - margin.bottom;
                    var x = d3.scale.ordinal().rangeRoundBands([0, width], .1)
                    var y = d3.scale.linear().range([height, 0]);
                    var xAxis = d3.svg.axis()
                        .scale(x)
                        .orient("bottom")
                    //.tickValues(data)
                    //.tickFormat(d => d.name);
                    var yAxis = d3.svg.axis()
                        .scale(y)
                        .orient("left")
                        .ticks(1);
                    var svg = d3.select("body").select("section").append("svg")
                        .attr("width", width + margin.left + margin.right)
                        .attr("height", height + margin.top + margin.bottom)
                        .append("g")
                        .attr("transform",
                            "translate(" + margin.left + "," + margin.top + ")");
                    x.domain(data.map(function (d) { return d.name; }));
                    y.domain([0, d3.max(data, function (d) { return d.calories; })]);
                    svg.append("g")
                        .attr("class", "x axis")
                        .attr("transform", "translate(0," + height + ")")
                        .call(xAxis)
                        .selectAll("text")
                        .attr("dx", "-.8em")
                        .attr("dy", "-.55em")
                        .style("text-anchor", "unset")
                        .attr("transform", "rotate(-90)");
                    svg.append("g")
                        .attr("class", "y axis")
                        .call(yAxis)
                        .append("text")
                        .attr("transform", "rotate(-90)")
                        .attr("y", 6)
                        .attr("dy", ".71em")
                        .text("Calories");
                    svg.selectAll(".bar")
                        .data(data)
                        .enter().append("rect")
                        .attr("class", "bar")
                        .style("fill", "steelblue")
                        .attr("x", function (d) { return x(d.name); })
                        .attr("width", x.rangeBand())
                        .attr("y", function (d) { return y(d.calories); })
                        .attr("height", function (d) { return height - y(d.calories); });
                }
            });
        });
    </script>

    @*<script type="text/javascript" src="https://mbostock.github.com/d3/d3.js?2.1.3"></script>
    <script type="text/javascript" src="https://mbostock.github.com/d3/d3.geom.js?2.1.3"></script>
    <script type="text/javascript" src="https://mbostock.github.com/d3/d3.layout.js?2.1.3"></script>*@

    <style type="text/css">
        .slice text {
            font-size: 16pt;
            font-family: Arial;
        }
    </style>

    <script type="text/javascript">
        $.ajax({
            url: "/GetStatisticsItems",
            success: function (data) {
                var w = 300,
                    h = 300,
                    r = 100,
                    color = d3.scale.category20c();
                var vis = d3.select("body")
                    .select("section")
                    .append("svg:svg")              //create the SVG element inside the <body>
                    .data([data])                   //associate our data with the document
                    .attr("width", w)           //set the width and height of our visualization (these will be attributes of the <svg> tag
                    .attr("height", h)
                    .append("svg:g")                //make a group to hold our pie chart
                    .attr("transform", "translate(" + r + "," + r + ")")    //move the center of the pie chart from 0, 0 to radius, radius

                var arc = d3.svg.arc()              //this will create <path> elements for us using arc data
                    .outerRadius(r);

                var pie = d3.layout.pie()           //this will create arc data for us given a list of values
                    .value(function (d) { return d.count; });    //we must tell it out to access the value of each element in our data array

                var arcs = vis.selectAll("g.slice")     //this selects all <g> elements with class slice (there aren't any yet)
                    .data(pie)                          //associate the generated pie data (an array of arcs, each having startAngle, endAngle and value properties)
                    .enter()                            //this will create <g> elements for every "extra" data element that should be associated with a selection. The result is creating a <g> for every object in the data array
                    .append("svg:g")                //create a group to hold each slice (we will have a <path> and a <text> element associated with each slice)
                    .attr("class", "slice");    //allow us to style things in the slices (like text)

                arcs.append("svg:path")
                    .attr("fill", function (d, i) { return color(i); }) //set the color for each slice to be chosen from the color function defined above
                    .attr("d", arc);                                    //this creates the actual SVG path using the associated data (pie) with the arc drawing function

                arcs.append("svg:text")                                     //add a label to each slice
                    .attr("transform", function (d) {                    //set the label's origin to the center of the arc
                        //we have to make sure to set these before calling arc.centroid
                        d.innerRadius = 0;
                        d.outerRadius = r;
                        return "translate(" + arc.centroid(d) + ")";        //this gives us a pair of coordinates like [50, 50]
                    })
                    .attr("text-anchor", "middle")                          //center the text on it's origin
                    .text(function (d, i) { return data[i].name; });        //get the label from our original data array

            }
        });
    </script>

    @*<script src="https://phuonghuynh.github.io/js/bower_components/jquery/dist/jquery.min.js"></script>
        <script src="https://phuonghuynh.github.io/js/bower_components/d3/d3.min.js"></script>
        <script src="https://phuonghuynh.github.io/js/bower_components/d3-transform/src/d3-transform.js"></script>
        <script src="https://phuonghuynh.github.io/js/bower_components/cafej/src/extarray.js"></script>
        <script src="https://phuonghuynh.github.io/js/bower_components/cafej/src/misc.js"></script>
        <script src="https://phuonghuynh.github.io/js/bower_components/cafej/src/micro-observer.js"></script>
        <script src="https://phuonghuynh.github.io/js/bower_components/microplugin/src/microplugin.js"></script>
        <script src="https://phuonghuynh.github.io/js/bower_components/bubble-chart/src/bubble-chart.js"></script>
        <script src="https://phuonghuynh.github.io/js/bower_components/bubble-chart/src/plugins/central-click/central-click.js"></script>
        <script src="https://phuonghuynh.github.io/js/bower_components/bubble-chart/src/plugins/lines/lines.js"></script>
        <script src="https://d3js.org/d3.v5.min.js"></script>
        <script src="js/charts.js"></script>
        <script>
            $(document).ready(function () {
                $.ajax({
                    url: "/GetStatistics",
                    success: function (data) {
                        var bubbleChart = new d3.svg.BubbleChart({
                            supportResponsive: true,
                            size: 600,
                            innerRadius: 600 / 3.5,
                            radiusMin: 50,
                            data: {
                                items: data,
                                eval: function (item) { return item.count; },
                                classed: function (item) { return item.name; }
                            },
                            plugins: [
                                {
                                    name: "lines",
                                    options: {
                                        format: [
                                            {// Line #0
                                                textField: "count",
                                                classed: { count: true },
                                                style: {
                                                    "font-size": "28px",
                                                    "font-family": "Source Sans Pro, sans-serif",
                                                    "text-anchor": "middle",
                                                    fill: "white"
                                                },
                                                attr: {
                                                    dy: "0px",
                                                    x: function (d) { return d.cx; },
                                                    y: function (d) { return d.cy; }
                                                }
                                            },
                                            {// Line #1
                                                textField: "text",
                                                classed: { text: true },
                                                style: {
                                                    "font-size": "14px",
                                                    "font-family": "Source Sans Pro, sans-serif",
                                                    "text-anchor": "middle",
                                                    fill: "white"
                                                },
                                                attr: {
                                                    dy: "20px",
                                                    x: function (d) { return d.cx; },
                                                    y: function (d) { return d.cy; }
                                                }
                                            }
                                        ],
                                        centralFormat: [
                                            {// Line #0
                                                style: { "font-size": "50px" },
                                                attr: {}
                                            },
                                            {// Line #1
                                                style: { "font-size": "30px" },
                                                attr: { dy: "40px" }
                                            }
                                        ]
                                    }
                                }
                            ]
                        });
                    }
                });
            });*@
    @*</script>*@
}